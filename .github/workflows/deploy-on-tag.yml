name: Deploy Micro App on Tag

on:
  push:
    tags:
      - 'shared/*'
      - 'header-app/*'
      - 'pip-app/*'
      - 'micro-app-1/*'
      - 'micro-app-2/*'

env:
  AWS_REGION: us-east-1
  PNPM_VERSION: 8

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Extract app name and version from tag
        id: extract
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          APP_NAME=$(echo $TAG_NAME | cut -d'/' -f1)
          VERSION=$(echo $TAG_NAME | cut -d'/' -f2)
          
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          echo "🚀 Deploying $APP_NAME version $VERSION"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 전체 히스토리 가져오기 (태그 정보 필요)
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            shared/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            apps/*/dist
            shared/dist
          key: ${{ runner.os }}-build-${{ steps.extract.outputs.app_name }}-${{ hashFiles(format('{0}/**', steps.extract.outputs.app_name == 'shared' && 'shared' || format('apps/{0}', steps.extract.outputs.app_name))) }}
          restore-keys: |
            ${{ runner.os }}-build-${{ steps.extract.outputs.app_name }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: |
          APP_NAME="${{ steps.extract.outputs.app_name }}"
          
          if [ "$APP_NAME" = "shared" ]; then
            echo "Building shared module..."
            pnpm --filter @mfa/shared build
          else
            echo "Building $APP_NAME..."
            pnpm --filter @mfa/$APP_NAME build
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # TODO: Role 기반 인증으로 변경 예정
          role-to-assume: ${{ secrets.SHAREDSERVICE_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          # 임시로 액세스 키 방식 지원
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set S3 bucket name
        id: s3-config
        run: |
          APP_NAME="${{ steps.extract.outputs.app_name }}"
          
          # 환경별 버킷 이름 설정 (추후 환경 변수로 관리 가능)
          BUCKET_NAME="mfa-${APP_NAME}-prod"
          
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "📦 Target S3 bucket: $BUCKET_NAME"

      - name: Deploy to S3
        run: |
          APP_NAME="${{ steps.extract.outputs.app_name }}"
          VERSION="${{ steps.extract.outputs.version }}"
          BUCKET_NAME="${{ steps.s3-config.outputs.bucket_name }}"
          
          # 빌드 파일 경로 설정
          if [ "$APP_NAME" = "shared" ]; then
            DIST_PATH="shared/dist"
          else
            DIST_PATH="apps/$APP_NAME/dist"
          fi
          
          echo "📤 Uploading $DIST_PATH to s3://$BUCKET_NAME"
          
          # 메타데이터와 함께 S3 업로드
          aws s3 sync $DIST_PATH s3://$BUCKET_NAME \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --metadata-directive REPLACE \
            --metadata "version=$VERSION,app=$APP_NAME,build-time=$(date -u +%Y-%m-%dT%H:%M:%SZ),git-commit=$GITHUB_SHA"
          
          echo "✅ S3 upload completed"

      - name: Get CloudFront Distribution ID
        id: cloudfront-config
        run: |
          BUCKET_NAME="${{ steps.s3-config.outputs.bucket_name }}"
          
          # S3 도메인으로 CloudFront Distribution 찾기
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[0].DomainName==\`${BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com\`].Id" \
            --output text)
          
          if [ -n "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
            echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
            echo "☁️ Found CloudFront Distribution: $DISTRIBUTION_ID"
          else
            echo "⚠️ CloudFront Distribution not found for bucket: $BUCKET_NAME"
            echo "distribution_id=" >> $GITHUB_OUTPUT
          fi

      - name: Invalidate CloudFront
        if: steps.cloudfront-config.outputs.distribution_id != ''
        run: |
          DISTRIBUTION_ID="${{ steps.cloudfront-config.outputs.distribution_id }}"
          
          echo "🔄 Creating CloudFront invalidation..."
          
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "✅ CloudFront invalidation created: $INVALIDATION_ID"
          
          # 무효화 완료 대기 (선택사항)
          echo "⏳ Waiting for invalidation to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id $DISTRIBUTION_ID \
            --id $INVALIDATION_ID
          
          echo "🎉 CloudFront invalidation completed"

      - name: Deployment summary
        if: always()
        run: |
          APP_NAME="${{ steps.extract.outputs.app_name }}"
          VERSION="${{ steps.extract.outputs.version }}"
          BUCKET_NAME="${{ steps.s3-config.outputs.bucket_name }}"
          
          echo "## 🚀 배포 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**앱**: $APP_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**버전**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**S3 버킷**: $BUCKET_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**CloudFront**: ${{ steps.cloudfront-config.outputs.distribution_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**커밋**: $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ 배포가 성공적으로 완료되었습니다." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 배포 중 오류가 발생했습니다." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 접속 URL" >> $GITHUB_STEP_SUMMARY
          echo "S3: https://$BUCKET_NAME.s3.$AWS_REGION.amazonaws.com" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.cloudfront-config.outputs.distribution_id }}" ]; then
            CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution \
              --id ${{ steps.cloudfront-config.outputs.distribution_id }} \
              --query 'Distribution.DomainName' \
              --output text)
            echo "CloudFront: https://$CLOUDFRONT_DOMAIN" >> $GITHUB_STEP_SUMMARY
          fi